---
title: "Rをつかったバイクラスタリング分析の実習"
---

## 準備しましょう

### サンプルデータを用います

+ RStudioでプロジェクトを開いているか確認してくださいね
+ `exametrika`が持っている`J35S515`を例に

```{r}
library(exametrika)
dat <- J35S515
dat$U |> head()
```


## バイクラスタリングの実行


+ 何やら色々出てきますので，順次解説していきます

```{r bic}
result <- Biclustering(dat, nfld = 5, ncls = 6, method = "B")
result
```

### アレイプロット

+ うまく分類できたかどうかをアレイプロットで確認できます。

```{r}
plot(result, type = "Array")
```

### 受験生とクラスの関係

#### クラスメンバーシップとプロファイル

クラスの分布をプロットします。

内部では，各受験者がどのクラスに所属するかの確率を推定しています。この確率をクラス・メンバーシップ・プロファイルといいます。数値で出力することも，プロットすることも可能です。

```{r}
## 丸めて出力
round(result$ClassMembership, 6) |> head()
## 図で出力
plot(result, type = "CMP", students = 1:6, nr = 2, nc = 3)
```


#### 推定された所属クラス

この所属確率が最も高いものが，推定される所属クラスとなります。

```{r}
result$ClassEstimated |> head()
```

#### 潜在クラス分布

メンバーシップは所属確率で，それをクラスごとに集計して分布を見るのがClass Membership Distributionです。


推定される所属クラス(推定値)で集計して分布を見るのがLatent Class Distributionです。

プロットの`type="LCD"`で両者が同時にプロットされます。

+ 棒グラフで表現されているのがLatent Class Distributionです。
+ 折れ線グラフで表現されているのがClass Membership Distributionです。


```{r}
plot(result, type = "LCD")
```

### 項目とフィールドの関係

内部では，各項目がどのフィールドに所属するかの確率を推定しています。この確率をフィールドメンバーシッププロファイルといい，`FieldMembership`という名前で保存されています。

```{r}
round(result$FieldMembership, 5)
```


### クラスとフィールドの関係

#### クラス参照ベクトル

フィールドにおけるクラスごと正答率をプロットすることができます。クラス参照ベクトルClass Reference Vectorと呼ばれます。

```{r}
plot(result, type = "CRV")
```

これは数値で確認することもできます。

```{r}
result$FRP
```

#### フィールド参照プロファイル

フィールドの特徴に注目し，クラスごと正答率をプロットすることができます。この図をフィールド参照プロファイルField Reference Profileといいます。

```{r}
plot(result, type = "FRP", nr = 2, nc = 3)
```

### テストとクラスの関係

#### テスト参照プロファイル

テスト得点とクラスの分布を同時にプロットするものをテスト参照プロファイルTest Reference Profileといいます。

+ 棒グラフで表現されているのがLatent Class Distributionです。
+ 折れ線グラフで表現されているのがTest Reference Profileで，クラスごとの期待得点です。

```{r}
plot(result, type = "TRP")
```



## ランクラスタリングの実行

+ 推定方法をRに変えると，潜在クラスが潜在ランクになります
    + アルゴリズムとしては，`LRA`の時と同じ順序性を保ったフィルタ行列を通しているだけです

```{r ranklustering}
result.R <- Biclustering(dat, nfld = 5, ncls = 6, method = "R")
result.R
```

### アレイプロット

+ うまく分類できたかどうかをアレイプロットで確認できます。

```{r}
plot(result.R, type = "Array")
```

### 受験生とランクの関係

#### ランクメンバーシップとプロファイル

ランクの分布をプロットします。

内部では，各受験者がどのランクに所属するかの確率を推定しています。この確率をランク・メンバーシップ・プロファイルといいます。数値で出力することも，プロットすることも可能です。

```{r}
## 丸めて出力
round(result.R$ClassMembership, 6) |> head()
## 図で出力
plot(result.R, type = "CMP", students = 1:6, nr = 2, nc = 3)
```


#### 推定された所属ランク

この所属確率が最も高いものが，推定される所属ランクとなります。

```{r}
result.R$ClassEstimated |> head()
```

#### 潜在ランク分布

メンバーシップは所属確率で，それをランクごとに集計して分布を見るのがRank Membership Distributionです。

推定される所属クラス(推定値)で集計して分布を見るのがLatent Rank Distributionです。

プロットの`type="LRD"`で両者が同時にプロットされます。

+ 棒グラフで表現されているのがLatent Rank Distributionです。
+ 折れ線グラフで表現されているのがRank Membership Distributionです。


```{r}
plot(result.R, type = "LRD")
```

### 項目とフィールドの関係

内部では，各項目がどのフィールドに所属するかの確率を推定しています。この確率をフィールドメンバーシッププロファイルといい，`FieldMembership`という名前で保存されています。

```{r}
round(result.R$FieldMembership, 5)
```


### ランクとフィールドの関係

#### ランク参照ベクトル

フィールドにおけるランクごと正答率をプロットすることができます。ランク参照ベクトルRank Reference Vectorと呼ばれます。

```{r}
plot(result.R, type = "RRV")
```

これは数値で確認することもできます。

```{r}
result.R$FRP
```

#### フィールド参照プロファイル

フィールドの特徴に注目し，ランクごと正答率をプロットすることができます。この図をフィールド参照プロファイルField Reference Profileといいます。

```{r}
plot(result.R, type = "FRP", nr = 2, nc = 3)
```

### テストとクラスの関係

#### テスト参照プロファイル

テスト得点とランクの分布を同時にプロットするものをテスト参照プロファイルTest Reference Profileといいます。

+ 棒グラフで表現されているのがLatent Rank Distributionです。
+ 折れ線グラフで表現されているのがTest Reference Profileで，ランクごとの期待得点です。

```{r}
plot(result, type = "TRP")
```


## Confirmatory Analysis

+ どの項目がどのフィールドに入るかを外挿的に決めることができます。
    + `conf`オプションに項目とフィールドの対応を記したベクトル，あるいは行列をあたえると，強制的にその割り振りで推定します。
    + 項目がテストの領域などに対応している仮説がある場合に便利です。

```{r}
result.R.conf <- Biclustering(dat,
    nfld = 5, ncls = 6, method = "R",
    conf = c(
        1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 4, 4, 4,
        5, 5, 5, 5, 5, 5, 5
    )
)

plot(result.R.conf, type = "RRV")
plot(result.R.conf, type = "TRP")
```

## Exploratory Analysis

+ 最適なフィールド数，クラス数がわからない場合は探索的なアプローチも可能です
    + 計算自体はそこまで遅くないので，適合度指標などを参考にグリッドサーチ(総当たり！)も悪くないアプローチです
    + IRMはノンパラメトリックな手法で潜在的なクラスを自動探索しますが，時間がかかります。

```{r}
result.IRM <- IRM(dat, gamma_c = 1, gamma_f = 1, verbose = TRUE)
result.IRM
```

## 多値への展開

+ 多値モデル(名義尺度)への展開も可能です。近日中に実装する予定です
    + ![Biclustering for Polydata](PolyBiclustering.png)
+ 多値モデル(順序尺度)への展開も可能なはずです。出来次第，実装する予定です

### これができると何が嬉しいか

+ 表面上の類似性に基づく分類なので，データ生成メカニズムを仮定しません
    + 個人間比較を必要としないので，社会的態度のような家庭を満たさない心理的データの分析ができます
    + スコアではなく反応パターンで項目や受検者を分類します；生態学的妥当性の高い心理尺度の作成，利用ができます。


