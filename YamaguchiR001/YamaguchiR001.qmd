---
title: "関数とパッケージの作り方"
subtitle: "初級から中級へのステップアップ"
author:
  - name: "Koji Kosugi"
    degrees: PhD
    url: "https://kosugitti.github.io/kosugitti10/"
    affiliations: Senshu University
    email: kosugitti_at_gmail.com
format: 
    revealjs:
        theme: serif
        footer: "行動計量学会27th春の合宿セミナー"
        height: 1200
        width:  1600
        transition: slide
        slide-number: true
        css: ["custom.css"]
editor: 
    render-on-save: true
execute:
  echo: true
from: markdown+emoji
---

## 自己紹介

::: columns
::: {.column width="60%"}
小杉考司（こすぎこうじ）

[{{< fa brands github >}}](https://github.com/kosugitti) [{{< fa brands discord >}}]() [{{< fa brands instagram >}}]() [{{< fa brands x-twitter >}}](https://twitter.com/kosugitti)@kosugitti
<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
<path fill="currentColor" d="M4.907 3.44c.709.12 1.533.501 2.576 1.247C9.28 5.97 10.769 7.739 12 9.564c1.231-1.825 2.72-3.593 4.517-4.877c1.043-.746 1.867-1.127 2.576-1.248c.767-.13 1.29.065 1.615.2C21.717 4.06 22 5.225 22 6.215c0 .201-.086 1.302-.185 2.36c-.052.546-.11 1.108-.166 1.577c-.053.428-.115.88-.19 1.133a4.331 4.331 0 0 1-1.951 2.517c.937.707 1.277 1.856.928 2.984c-.597 1.924-2.737 4.397-4.835 4.618c-1.773.186-2.935-1.325-3.601-2.76c-.666 1.435-1.828 2.946-3.6 2.76c-2.099-.22-4.24-2.694-4.836-4.618c-.35-1.128-.01-2.277.928-2.984a4.331 4.331 0 0 1-1.95-2.517c-.076-.253-.138-.705-.19-1.133a60.58 60.58 0 0 1-.167-1.577C2.085 7.517 2 6.416 2 6.215c0-.99.283-2.155 1.292-2.576c.326-.135.847-.33 1.615-.2M4.05 6.916c.064.818.18 2.108.288 2.992c.032.268.055.545.122.807c.397 1.34 1.929 2.082 3.686 1.887a1 1 0 0 1 .257 1.983c-.756.112-3.315.357-2.928 1.607c.357 1.151 1.848 3.087 3.134 3.222c.928.097 1.5-1.394 1.766-2.045c.275-.674.488-1.38.668-1.982a1 1 0 0 1 1.916 0c.18.602.393 1.308.668 1.982c.266.651.838 2.142 1.766 2.045c1.286-.135 2.777-2.07 3.134-3.222c.387-1.25-2.172-1.495-2.928-1.607a1 1 0 0 1 .257-1.983c1.757.195 3.289-.547 3.686-1.887c.069-.266.089-.536.122-.807a80.35 80.35 0 0 0 .288-2.992c.037-.468.247-1.637-.522-1.506c-.286.049-.823.241-1.749.903c-1.943 1.389-3.705 3.513-4.789 5.64a1 1 0 0 1-1.782 0c-1.084-2.127-2.846-4.251-4.789-5.64c-.926-.662-1.463-.854-1.749-.903c-.784-.134-.559 1.034-.522 1.506"/>@kosugitti.bsky.social

</svg>

[{{< fa brands mastodon >}}Kosugitti\@mastdon.jp]()

[{{< fa brands orcid >}}0000-0001-5816-0099](https://orcid.org/0000-0001-5816-0099)

### 略歴

-   1976.01.17 大阪府大阪市生まれ
-   2007.04～2018.03 山口大学教育学部に奉職
    -   大殿のあたりに住んでました
-   2018.04〜専修大学人間科学部

### 専門

-   数理社会心理学(社会心理学＋心理統計)


### R歴

-   2007年から本格利用開始

:::

::: {.column width="40%"}

あとでじゃん献本！しましょう。

::: r-stack

![](kosBlack.jpg){.fragment width="450"}

![](RUMS1.jpg){.fragment width="450"}

![](RUMS2.jpg){.fragment width="450"}

![](SimBook.jpg){.fragment width="450"}
:::
:::
:::

## 中級者とは何か

初級者を名乗るのは簡単なことですが，どこから中級者を名乗ればいいのかは難しい。

-   利用歴X年目から？
-   パイプ演算子を使い始めたら？

個人的には，↓ぐらいが中級者のラインではないかと。ちなみに，いずれも「案ずるより産むが易し」で，やってみたら意外と簡単なステップなんです。

-   SピーSSなど，他の統計ソフトをアンインストールした
-   関数やパッケージを作り始めた
-   Quarto/Github/Shinyなどに手を出し始めた

今日は**「関数とパッケージの作り方」**をお話しするので，今日の話を聞き終わったら皆さんも中級者？

## 余談；Quartoって？

### Quartoとは，文書作成ツールの名称。

-   マークダウンという書式をつかって，プレーンテキストに記号を書き込みながら文書を作成します。
-   HTML言語をブラウザが読める形にレイアウトするように，Quartoで書かれた文書をコンパイルしてhtmlやpdf,docx,epub,pptxなどのファイルに出力できます。
-   このスライドもQuartoを使ってhtmlに変換しています。


### Rmarkdownとどう違うの？

-   RStudioにはRmarkdownという書式があり，これも同じような仕組み。
-   RmarkdownやQuartoを使うメリットは，文書作成，統計計算，図の可視化などが一枚のファイルでできるので，別々のアプリを使って作る必要がないこと，計算プロセスなども文書に埋め込めることなどが利点。
-   QuartoはRmarkdownの上位互換で，最近Posit社が力を入れている書式であり，RだけでなくPython, Juliaなど複数の言語をサポートしているところが特徴的。


# 関数を作る

## 関数をつかう

関数を使うのは簡単ですね。たとえば平方根を求めたいときに，

```{r}
#| echo: true
sqrt(16)
```

のように使うわけです。このとき，

-   `sqrt`は関数名
-   ()で関数に渡す値は**引数(ひきすう，argument)**
-   `4`という結果は**戻り値(もどりち，value)**

といいます。

## 関数を作る1；引数がひとつのばあい

関数を作る関数，`function`をつかって次のように関数を作ることができます。

```{r}
add2 <- function(x) {
    tmp <- x + 2
    return(tmp)
}
```

1.  関数名に`function`でつくるオブジェクトを代入します。
2.  function`後ろの`()\`に，その関数がとる引数名を書きます。
3.  その後ろの`{}`に関数の計算・操作を書きます。複数行可。
4.  `return`関数に戻り値にするものを渡します

これで関数`add2`ができました。使い方は他の関数と同じです。

::: big-code
```{r}
#| echo: true
add2(4)
```
:::

この関数は与えられた数字に`2`を足して返すだけ挙動ですが，うまく動いてますね！

## 関数を作る2；引数がふたつのばあい

さっきの関数は引数がひとつだけでした。複数指定するときは，`()`のなかに並べて書きます。

```{r}
plus <- function(x, y) {
    tmp <- x + y
    return(tmp)
}
```

-   この関数は2つの引数を取り，加えた値を返します。

```{r}
plus(2, 4)
```

-   引数を指定してやれば，順番を入れ替えてもOKです。逆にいうと，引数名の指定がなければ前から順に適用されていきます。

```{r}
plus(y = 3, x = 2)
```

## 関数を作る3；デフォルトの設定

関数を作る時に，引数に値を渡しておくと，それがデフォルトの値になります。

```{r}
plus2 <- function(x = 1, y = 2) {
    tmp <- x + y
    return(tmp)
}
```

-   デフォルトの値があると，指定しなくてもその値が利用されます。

```{r}
plus2()
plus2(x = 3)
plus2(y = 2)
```

-   皆さんが今まで使っていた関数も，デフォルトで色々決まっていることがあります。
-   ヘルプを見ると，どういう引数オプションがあるのかわかります。一度見ておくと，理解がいっそう深まりますよ〜:smiley:

## 関数を作る4；注意点(スコープ)

関数の中で作った・使ったオブジェクトは，関数の外から参照できません。

```{r}
minus <- function(x = 3, y = 2) {
    tmp <- x - y
    return(tmp)
}
```

これに続けて，関数の中でつかっていた一時オブジェクト`tmp`を参照してみましょう。

```{r}
#| eval: false
tmp
```

<br>

```         
Error:

!  オブジェクト 'tmp' がありません 

 実行が停止されました 
```

<br> Oh...! :scream:

## スコープのひみつ


::: columns
::: {.column width="60%"}

-   関数の中で使った変数は関数の外で使えないというのは，不便に思えますが，実は親切設計。

-   関数の中で閉じている・まとまっていることで，オブジェクトがあちこちで上書きされたりすることがなくなります

-   変数がどこまで効いているかという概念を「スコープ」と言いますが，これができるまでのプログラミング言語(FortranとかBASICとか)は，長いコードの中で変数名がごっちゃになることがありました。

- 歴史的経緯で，「どこからでも変数名が見える」状態から，「全体で利用できる変数(グローバル変数)と，関数の中だけて使える変数(ローカル変数)にわける」状態へ，そして「もう全部関数の中に閉じ込めちゃえよ」となってきています。

:::

::: {.column width="40%"}
![スパゲティコード by chatGPTv4](spa.png)
:::
:::

## Rは再利用する

しかし，Rは関数の中で見つからない変数があれば，環境変数を再利用します！ちょっとコワイ。

```{r}
# 関数の前に用意する
pre_tmp <- 10
# 関数を作る
myFunc <- function(x) {
    tmp <- x + pre_tmp
    pre_tmp <- 20
    return(tmp)
}
```

注目ポイントは，次の3点です。

+ `pre_tmp`はこの関数`myFunc`の引数ではない。
+ `pre_tmp`はこの関数の中で違う数字を割り当てられている。
+ この関数が返すのは`tmp`だけである。

## これを使ってみると，おかしなことが起きるよ。

```{r}
# 関数を使う
myFunc(3)
# 関数の中で加えられた変更は効いてない
pre_tmp
```

Rはこのように「再利用癖」があるので，注意しましょう。

関数を作るときは， **関数の中で使う変数は全て引数に指定する**ことを心がけた方が良いかも。

## 関数を作る5；複数の戻り値

Rの関数が返すオブジェクトは一つだけ。もし複数の値を返したいのなら，`list`でまとめよう。

```{r}
calcs <- function(x, y) {
    pl <- x + y
    mi <- x - y
    pr <- x * y
    di <- x / y
    tmp <- list(plus = pl, minus = mi, prod = pr, divide = di)
    return(tmp)
}
```

使い方の例；

```{r}
return <- calcs(x = 10, y = 2)
#
return$plus
return$divide
```

## Hands-on!(時間調整と休憩)

こんな感じで関数が作れます！色々作ってみよう。

+ Rには不偏分散を計算する`var`はあるけど標本分散を計算する関数はないよ。作ってみよう！
+ 同じコードを3回書いたら，関数化することを考えよう！

### 関数を作るメリット

+ 再利用性；同じ関数を他のプログラムでも再利用できます。
+ モジュール性；プログラムを管理しやすい部分に分割できます。
+ 保全性；部分に分割できているので，バグが見つけやすく，メンテナンスしやすくなります。

そしてたくさん関数を書いたら・・・・

# パッケージを作ってみよう！

## パッケージを使う

### パッケージを「使う」のは割と敷居が低い

Rではデフォルトで持っているパッケージでも一通りの計算ができるが，より便利に・より専門的に使うためにはパッケージの導入は必須。

(心理統計で)よく使うパッケージとしては次のようなものが

-   tidyverse
-   psych
-   rstan/cmdstanr

これらは`library`関数で呼び出すことができる。欲しいパッケージはインターネットからとってくることができる。

-   install.packages関数でインストール
-   update.packages関数で一括アップデート
-   RStudioのPacagesタブでGUI操作も！

## あなたのパッケージはどこから?

-   一般的には，**CRAN(The Comprehensive R Archive Network)**という書庫ネットワークからダウンロードする(している)。 ![CRAN一覧](CRAN.png)
-   古いパッケージでもはやCRANに載っていない，というときはアーカイブや作者のサイトからファイルをダウンロードしたりする。ちなみに，パッケージは複数のファイルをまとめて`.tar.gz`形式で圧縮されています。
    -   →.tar.gzはUnix系の圧縮方法で，tarで複数のファイルを一つにまとめ，gzipで圧縮するという2段階ステップを経ているのでこんな感じの拡張子になる。
-   最近はGithubをつかって公開されていることも多く，`devtools`パッケージを使ってダウンロードすることができる。

## (余談)Githubって？

-   GithubはGitというシステムをインターネットをHubとして使うようにしたもの。
-   Gitはバージョン管理システムのこと 
- ![](branch.png)
-   commitとは保存と同じような意味。ファイル構造やファイルの差分を記録していくこと。
-   幹の部分をいきなり変更するのではなく，枝葉で修正を加えて，「よーしこれで！」という時に幹をアップデートする仕組み。

## (余談)Githubって？(その2)

-   さっきのcommit/pull requestをネット上でやる。
-   Githubというサイトにファイルを保存する場所(レポジトリ)を作ってやり取り。
-   ネットに挙げる(push)，ネットから最新版を取ってくる(pull)という作業が含まれる。 -
-  ![](github.png)

## (余談)Githubって？(その3)

### Githubのメリット

-   複数チームによる並列的な開発に貢献！
    -   もとはLinuxの開発システム
    -   個人で使ってもなんら問題ない。
    -   文系のひとが使うことにもメリットが(作文・執筆)
        -   卒論の執筆状況の管理・バックアップに使える！指導教員も安心

### Githubの便利機能

-   Github PagesというWebサイトを作ることも
    -   パッケージ/ソフトウェアの開発と公開が同時に進められる
        -   随時Bug Fixができる
        -   CRANへの登録は審査があって時間がかかるので，最近はこちらで野良パッケージを公開する人も多い
    -   Webサイトの書き方はRmd/Quartoでカンタン
    -   RStudioと連携できる

## 宣伝

<https://kosugitti.github.io/Exametrika/>

::: columns
::: {.column width="50%"}
Readme.mdが自動的にサイト化される ![](Exametrika1.png){fig-align="center"}
:::

::: {.column width="50%"}
Githubのレポジトリはこんな感じ ![](Exametrika2.png)
:::
:::

![](Exametrika_install.png)


## パッケージを作ってみよう

パッケージには関数，データセット，ヘルプファイルが含まれますが・・・

### パッケージを自作するメリット

-   勉強になる！
    -   統計モデルは数式で説明されて，使う時は関数の使い方を学ぶ
        -   解説と実践の間に乖離があると思いません？
        -   数式の解説って，式展開を追うだけでわかりますか？数値で確認したくない？
-   再利用ができるようになる！
    -   同じコードを3回書いたら関数化しよう。
    -   いつも書く自分のコードは書いて保存しておこう
    -   ヘルプファイルで自分への記録に
-   共有しよう
    -   データセットも関数も，まとめて`library(MyPackage)`
    -   最初に書いた自作パッケージは科研のもの
        -   データセットとよく使うコードをパッケージングして共同研究者とシェア

## パッケージを作る環境はずいぶんと整っています！

-   RStudioがプロジェクトをパッケージ作成仕様にしてくれる
-   devtools,usethis,roxygen2など，パッケージを手助けしてくれるパッケージが
    -   `devtools`はスケルトン，チェック，ビルドなどを手助けしてくれる
    -   `usethis`は初期設定などをカンタンにしてくれる
    -   `roxygen2`はヘルプファイルを自動的に作ってくれる
-   Githubと連携すれば公開サイトを作るのもカンタン

![](RStudio.png){width="24%"} ![](devtools.png){width="24%"} ![](usethis.png){width="24%"} ![](roxygen2.png){width="24%"}

## やってみよう(その1)

まずは新しいプロジェクトから

::: r-stack
![](step1.png){.fragment width="2000"}

![](step2.png){.fragment width="1600"}

![](step3.png){.fragment width="1200"}

![](step4.png){.fragment width="1200"}
:::

## やってみよう(その2)

![](step5.png)

サンプルコード`hello.R`というのが表示されていると思います。 Filesタブを見ると，他にもNAMESPACE，DESCRIPTION，manフォルダ，Rフォルダがあるのがわかります。 (`.Rproj`はプロジェクトファイル，`.Rbuildignore`はプロジェクト関係なので一旦無視)

## やってみよう(その3)；しっておこう

-   パッケージのフォルダは`R`,`man`,`data`,`inst`,`tests`からなる
    -   `R`フォルダにRのコードを書きます
    -   `man`フォルダにヘルプファイルを入れますが，`roxygen2` が**自動生成する**ので気にする必要なし！
    -   `data`フォルダにパッケージと共に共有するデータを入れます。
    -   `inst`はその他のメタデータ，`tests`は検証テストコードなどを入れます。
    -   個人的には`develop`フォルダをつくって下書きのコードを入れておきます。
-   フォルダの外にはDESCRIPTIONとNAMESPACEが
    -   DESCRIPTIONはパッケージの説明(著者名，連絡先，ライセンス，依存パッケージなど)を書きます。あとで見てみましょう。
    -   NAMESPACEは**自動生成されるので** 手をつける必要なし！
        -   名前空間といって，パッケージがもつ関数名のリストなどが入ります。同じ関数名があると上書きしちゃうよ，という警告を出すために必要。

## やってみよう(その4)

BuildタブのConfigure Build Tools...をクリックし，**自動生成**(ラクチン！)してくれるための設定をしておこう。

::: r-stack
![](step6.png){.fragment width="1000"}

![](step7.png){.fragment width="1000"}
:::

## やってみよう(その5)；名前空間は大事！

### 名前空間をRoxygen管理下に

NAMESPACEはパッケージが使う関数名を書くところなので，自分で作らないのが基本。 でも`Roxygen`で自動生成するためには，すでに存在しているNAMESPACEが`Roxygen`で作られたものでなければならないので，最初のNAMESPACEは削除しておこう。

あるいは， `usethis::use_namespace()`で上書きしても良い。

![](step8.png)

開いた時に「このドキュメントは読むの専門だぞ(書き込んじゃダメだぞ)」，`roxygen2`によって作られました，と書いてあればOK。以後自動的に書き加えられていきます。

## やってみよう(その6)；お品書きから

次はDESCRIPTIONの編集。これは手書きで。

-   `Title`; パッケージ名
-   `Author`; 作者名
-   `Maintainer`；保全・管理する人。
-   `Description`; 説明書

※英語です！chatGPT先生に翻訳してもらおう！

![](step9.png){hight="80%"}

## ほんまなんでもやってくれますな

![](step10.png){fig-align="center" width="150%"}

## やってみよう(その7)；usethisパッケージの力を借りて

### ライセンスの追加

パッケージを公開する時の権利関係を明記しておきましょう。 `usethis`パッケージにはいろいろなライセンスが用意されており，名前だけでうまくやってくれるようになっています。

-   `use_mit_license`；短くて理解しやすいライセンス。このライセンスでは，誰でもコードを変更し配布することを許可しているが，下のライセンスと著作権表示は保持されるというもの。

-   `use_gpl3_license`；GPLは「ソフトウェアを使う自由」「変更する自由」「ソフトウェアを共有する自由」「変更を共有する自由」をうたう**フリーソフトウェア**の精神。R自体がGPLに基づいています。

-   `use_apl2_licence`；アパッチ(Apache)ライセンスは，Apacheソフトウェア財団が公開し ているもので，商用利用や改変ができるライセンス。

-   ![](step11.png)

## 追加されたライセンス

LICENSE.mdファイルが自動的に追加される。

![](license.png){fig-align="center"}

## やってみよう(その8)；usethisパッケージの力を借りてpart2

Roxygenで自動生成してくれるのは，ヘルプだけでなくREADME.Rmdも。

![](step12.png)

**README**とは，「まずこれを読んでね」という最初の説明書ファイル。Rmd書式で準備すると，Githubで公開する時の表紙になる。便利！

## README.Rmdより

これが自動的に用意されます！ ![](README.png){fig-align="center" width="80%"}

## コードを書きながらヘルプを書く；Roxygenの書き方

あとは関数をバリバリ書いていくだけ。ここでヘルプを自動的に作ってもらうために，関数の前に`Roxygenコメント`を用意しよう。

`Roxygenコメント`は`#'`から始めることでただのコメントアウトじゃないよ，ということを表現。続く`@XXX` でヘルプのどこに何を表示させるかを書きます。

```{r}
#' @title 関数名
#' @author 関数の作者名。必要なら。
#' @description 関数の説明
#' @details さらに詳しい説明
#' @note descriptionに書くほどではないことを書くならこちら
#' @importFrom 関数の中で他のパッケージから引用した関数を使うときは，全てここに書く
#' @param この関数が取る引数を書く
#' @return この関数が返す値を書く
#' @export この関数をユーザが使ってほしい時は，必ずこのコマンドが必要
#' @reference 参考資料や引用文献を\url{}などで記載
#' @examples 関数の使用例を書く
#' @seealso 他のドキュメントやウェブサイトへのリンクをかく。
#' @seealso[function()]など
```

-   `@title`,`@description`はまあ書きましょう。
-   `@importFrom`は忘れがち！でも忘れてたらコンパイル時にエラーで教えてくれるのでダイジョブ
-   `@export`を忘れると，コンパイルしても「ユーザが使えない関数」になっちゃう。そんなのいるの？と思うかもしれないけど，内部だけの処理で直接ユーザに触って欲しくない関数を書くこともあるので・・・

## Check and Build

物は試し。やってみましょう。`R/hello.R`, `man/hello.Rd`を消して，関数を書きます！

::: r-stack
![](step13.png){.fragment width="1200"}

![](step14.png){.fragment width="1200"}

![](step15.png){.fragment width="1600"}

![](step16.png){.fragment width="1200"}
:::

## ERROR! WARNING!

![](step17.png)

-   エラーや警告はつきもの！おそれないでね。むしろこれをひとつずつ潰していくのが快感・・・<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 3a9 9 0 1 0 0 18a9 9 0 0 0 0-18M1 12C1 5.925 5.925 1 12 1s11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12m9.233-2.134l-3.464 2l-1-1.732l3.464-2zm4.536-1.732l3.464 2l-1 1.732l-3.464-2zm-5.869 5.5l.5.865C9.922 15.4 10.89 16 12 16s2.08-.601 2.6-1.5l.5-.866l1.731 1.001l-.5.866A4.998 4.998 0 0 1 12 18a4.998 4.998 0 0 1-4.33-2.5l-.501-.865z"/></svg>

-   先ほどの関数，引数`x`をとっていたのに，`@param`の設定がなかったことが問題で警告が出ています。

## エラーも警告もない世界

-   ちゃんと`@param`を書きました。
-   もちろん`@export`もね！

![](step18.png)

## ヘルプができてる

::: r-stack
![](step19.png){.fragment width="1600"}

![](step20.png){.fragment width="1600"}
:::

## 俺たちの戦いはまだ始まったばかりだ(完)

-   ここからはもう，地道な作業。コードを書いて，マニュアル書いて，チェックして，警告やエラーをつぶす，の繰り返し。隙間時間にちょこちょこ書き進めていこう。

### 落穂拾い

-   パッケージに同梱するデータは`save`関数をつかって`.rda`形式にし，`data`フォルダに入れる。
-   他のパッケージになるべく依存しないパッケージの方が美しい気がする。けどどうしても必要な場合は次の2点に注意
    -   `Roxygenコメント`で`@importFrom`を忘れずに。
    -   ![](importFrom.png)
    -   DESCRIPTIONに`Depends:` として外部からとってくるパッケージを書こう(手動)
    -   ![](depends.png)

## 落穂拾い(追加)

-   `DESCRIPTION`は手動で修正していく。`Version`はお気持ち次第。
    -   [セマンティックバージョニング 2.0](https://semver.org/lang/ja/)では、ピリオドで区切られた数字はそれぞれメジャー、マイナー、パッチバージョンを表す。
    -   大きな機能の修正はメジャーリビジョン，関数の追加などはマイナーバージョン，バグ修正などはパッチバージョンかな。
-   `usethis::use_news_md()`をつかうと`NEWS.md`ファイルを作ることができる。要するにバージョンが上がった時に何が変わったか，を記録するところ。
-   `testthat`をつかうと検証用コードを書くことができて，「新しい環境にこのパッケージを入れたらちゃんと動くかな？」を確認できる。
-   `devtools::build()`で`.tar.gz`ファイルができるので，これでファイルとして共有できる。インストールは`install.packages(ファイル名, repos = NULL, type = "source")`で。RStudioのGUI経由のほうが楽かも。
-   `hexSticker`パッケージを使うと，六角形の例のかっこいいシールが作れたりします！

# Enjoy!
